(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{524:function(e,s,t){"use strict";t.r(s);var a=t(34),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"publishing-messages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#publishing-messages"}},[e._v("#")]),e._v(" Publishing messages")]),e._v(" "),t("p",[e._v("When a message is published (by way of a call to "),t("code",[e._v("bus.Publish")]),e._v("), it's important to understand what MassTransit actually\ndoes under the hood. While the explicit implementation details depend upon the message transport being used, the general\npattern is the same.")]),e._v(" "),t("p",[e._v("MassTransit follows the "),t("a",{attrs:{href:"http://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("publish subscribe"),t("OutboundLink")],1),e._v(" message pattern, where a copy of the message is delivered to each subscriber.\nThe message transport determines how the actual routing is performed, but the conventions of each transport are described below.")]),e._v(" "),t("h2",{attrs:{id:"routing-on-rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#routing-on-rabbitmq"}},[e._v("#")]),e._v(" Routing on RabbitMQ")]),e._v(" "),t("p",[e._v("RabbitMQ provides powerful routing capabilities out of the box, in the form of exchanges and queues. Exchanges can be bound\nto queues, as well as other exchanges, making it easy to create a message routing fabric. MassTransit leverages exchanges\nand queues combined with the .NET type system to connect subscribers to publishers.")]),e._v(" "),t("p",[e._v("MassTransit uses the message type to declare exchanges and exchange bindings that match the hierarchy of types implemented\nby the message type. Interfaces are declared as separate exchanges (using a fully-qualified type name that is compatible with\nthe naming structure of exchanges) and bound to the published message type exchange. When a message is first published, the\nexchanges are declared once, and then used for the life of the channel.")]),e._v(" "),t("blockquote",[t("p",[e._v("Private types, such as classes, are declared as auto-delete so they do not clutter up the exchange namespace.")])]),e._v(" "),t("p",[e._v("Once declared, published messages are to the message type exchange, and copies are routed to all the subscribers by RabbitMQ.\nThis approach was "),t("a",{attrs:{href:"http://spring.io/blog/2011/04/01/routing-topologies-for-performance-and-scalability-with-rabbitmq/",target:"_blank",rel:"noopener noreferrer"}},[e._v("based on an article"),t("OutboundLink")],1),e._v(" on how to maximize routing performance in RabbitMQ.")]),e._v(" "),t("p",[e._v("This dynamic, type-based routing model has proved very powerful in many large applications. The ability to add\nnew consumers to an existing message publisher is a great way to manage dependencies and keep projects from becoming tightly\ncoupled.")]),e._v(" "),t("p",[e._v("To see how this plays out, consider the following message types:")]),e._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("Company"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Messages")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("CustomerAddressUpdated")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("UpdateCustomerAddress")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("UpdateCustomerAddressCommand")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("UpdateCustomerAddress")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("Once the messages have been published, exchanges are created in RabbitMQ for each of the message types:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Exchanges\n\nCompany.Messages.CustomerAddressUpdated\nCompany.Messages.UpdateCustomerAddress\nCompany.Messages.UpdateCustomerAddressCommand\n    - Includes a binding to Company.Messages.UpdateCustomerAddress\n")])])]),t("p",[e._v("When a receive endpoint is started, the second half of the exchange/queue binding is performed, where the consumer subscriptions\nare bound to the consumer message type exchanges, closing the loop.")]),e._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" busControl "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("CreateUsingRabbitMq")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("cfg "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    cfg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"localhost"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    cfg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ReceiveEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"customer_update_queue"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Consumer")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("UpdateCustomerConsumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("This results in the creation of a queue, as well as a binding to the queue from the "),t("code",[e._v("UpdateCustomerAddress")]),e._v(" exchange.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Exchanges\n\ncustomer_update_queue\n    - Includes a binding from Company.Messages.UpdateCustomerAddress\n\nQueues\n\ncustomer_update_queue\n    - Includes a binding from the customer_update_queue exchange\n")])])]),t("blockquote",[t("p",[e._v("Because RabbitMQ only allows messages to be sent to exchanges, an exchange matching the name of the queue is created and bound to the queue.\nThis makes it easy to send messages directly to the queue using the same name. It's actually a pretty cool abstraction, and RabbitMQ makes\nit very flexible by allowing exchange-to-exchange bindings. By keeping the bindings at the exchange level, it eliminates any impact to message\nflow. Dru "),t("a",{attrs:{href:"http://codebetter.com/drusellers/2011/05/08/brain-dump-conventional-routing-in-rabbitmq/",target:"_blank",rel:"noopener noreferrer"}},[e._v("shared his experience"),t("OutboundLink")],1),e._v(" with this as well.")])]),e._v(" "),t("h3",{attrs:{id:"balancing-the-load"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#balancing-the-load"}},[e._v("#")]),e._v(" Balancing the load")]),e._v(" "),t("p",[e._v("Because RabbitMQ is a message broker, it supports multiple readers from the same queue. This makes it super easy to setup a\nload balancing scenario where the same service is running on multiple servers, each of which is connected to the same queue. As\nmessages arrive on the queue, they are delivered to the first available consumer that can receive the message. To get good\nload balancing, it's important to set the "),t("code",[e._v("PrefetchCount")]),e._v(" to a sensible value on the consumer so that messages are well distributed.")]),e._v(" "),t("h3",{attrs:{id:"routing-on-azure-service-bus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#routing-on-azure-service-bus"}},[e._v("#")]),e._v(" Routing on Azure Service Bus")]),e._v(" "),t("p",[e._v("MassTransit uses a similar approach for Azure Service Bus, but uses Topics, Subscriptions, and Queues.")]),e._v(" "),t("blockquote",[t("p",[e._v("More details to come...")])])])}),[],!1,null,null,null);s.default=n.exports}}]);