(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{468:function(e,a,t){"use strict";t.r(a);var s=t(34),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"sample"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample"}},[e._v("#")]),e._v(" Sample")]),e._v(" "),t("p",[e._v("We've included a sample ASP.NET Core project, and back end console application to show interoperability with the backplane. The only thing needed is RabbitMQ. I'd recommend using their "),t("a",{attrs:{href:"https://store.docker.com/community/images/library/rabbitmq",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker image"),t("OutboundLink")],1),e._v(" to spin up the broker.")]),e._v(" "),t("h2",{attrs:{id:"sample-signalr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-signalr"}},[e._v("#")]),e._v(" Sample-SignalR")]),e._v(" "),t("p",[e._v("You can view the "),t("a",{attrs:{href:"https://github.com/MassTransit/Sample-SignalR",target:"_blank",rel:"noopener noreferrer"}},[e._v("MassTransit Sample here"),t("OutboundLink")],1),e._v(". The sample was based off of "),t("a",{attrs:{href:"https://github.com/aspnet/SignalR-samples/tree/master/ChatSample",target:"_blank",rel:"noopener noreferrer"}},[e._v("Microsoft's chat sample"),t("OutboundLink")],1),e._v(", which is nearly identical to the "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&tabs=visual-studio",target:"_blank",rel:"noopener noreferrer"}},[e._v("tutorial here"),t("OutboundLink")],1),e._v(", except the only different is it's stripped down to the bare minimum (no razor Pages, bootstrap or JQuery libraries).")]),e._v(" "),t("p",[e._v('The other difference is the Javascript client callback method name is "ReceiveMessage" versus "broadcastMessage", but both samples are nearly the same. and the hub route is /chat versus /chatHub.')]),e._v(" "),t("p",[e._v("The other addition we added is in the Properties/launchSettings.json, which lets us start 2 profiles on different ports. Then helps simulate horizontal scaling.")]),e._v(" "),t("h3",{attrs:{id:"mvc-sample"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-sample"}},[e._v("#")]),e._v(" Mvc Sample")]),e._v(" "),t("p",[e._v("You can simulate scaleout by running the two profiles.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> cd (your cloned Sample-SignalR)\\src\\SampleSignalR.Mvc\n> dotnet run --launch-profile sample1\n> dotnet run --launch-profile sample2\n")])])]),t("p",[e._v("Now in two browser tabs, open up in each:\nhttp://localhost:5100\nhttp://localhost:5200")]),e._v(" "),t("p",[e._v("Then you can type a message in each, and see them show up in the other. The backplane works!!")]),e._v(" "),t("h2",{attrs:{id:"console-sample"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#console-sample"}},[e._v("#")]),e._v(" Console Sample")]),e._v(" "),t("p",[e._v("If you have some back end services (console apps, or Mt Topshelf consumers), you might want to notify users/groups of things that have happened in real time. You can do this by running this console app.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> cd (your cloned Sample-SignalR)\\src\\SampleSignalR.Service\n> dotnet run\n")])])]),t("p",[e._v("An type in a message to broadcast to all connections. You will see the message in your browsers chat messages")])])}),[],!1,null,null,null);a.default=r.exports}}]);