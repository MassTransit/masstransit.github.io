(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{570:function(e,t,a){"use strict";a.r(t);var s=a(34),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"transports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transports"}},[e._v("#")]),e._v(" Transports")]),e._v(" "),a("p",[e._v("MassTransit support multiple transports, including:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"rabbitmq"}},[e._v("RabbitMQ")])]),e._v(" "),a("li",[a("a",{attrs:{href:"azure-sb"}},[e._v("Azure Service Bus")])]),e._v(" "),a("li",[a("a",{attrs:{href:"activemq"}},[e._v("ActiveMQ")])]),e._v(" "),a("li",[a("a",{attrs:{href:"amazonsqs"}},[e._v("Amazon SQS")])]),e._v(" "),a("li",[a("a",{attrs:{href:"in-memory"}},[e._v("In Memory")])])]),e._v(" "),a("h3",{attrs:{id:"what-does-masstransit-add-to-the-transport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-does-masstransit-add-to-the-transport"}},[e._v("#")]),e._v(" What does MassTransit add to the transport?")]),e._v(" "),a("p",[e._v("MassTransit is a lightweight service bus for building distributed .NET applications. The main goal is to provide a consistent, .NET friendly abstraction over the message transport. To meet this goal, MassTransit brings a lot of the application-specific logic closer to the developer in an easy to configure and understand manner.")]),e._v(" "),a("p",[e._v("The benefits of using MassTransit instead of the raw transport APIs and building everything from scratch, are shown below. These are just a few, and some are more significant than others. The fact that the hosting of your consumers, handlers, sagas, etc. are all managed consistently with a well documented production ready framework is the biggest advantage. You can also find numerous blog posts, podcasts, and articles written about MassTransit online.")]),e._v(" "),a("h4",{attrs:{id:"concurrency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrency"}},[e._v("#")]),e._v(" Concurrency")]),e._v(" "),a("p",[e._v("MassTransit is completely asynchronous and leverages the .NET Task Parallel Library (TPL) to consume messages concurrently to achieve maximum throughput and high server utilization.")]),e._v(" "),a("h4",{attrs:{id:"connection-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connection-management"}},[e._v("#")]),e._v(" Connection management")]),e._v(" "),a("p",[e._v("The network is unreliable. If the application is disconnected from the message broker, MassTransit takes care of reconnecting and making sure all of the exchanges, queues, and bindings are restored.")]),e._v(" "),a("h4",{attrs:{id:"exception-retries-and-poison-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception-retries-and-poison-messages"}},[e._v("#")]),e._v(" Exception, retries, and poison messages")]),e._v(" "),a("p",[e._v("Your message consumers don't need to know about broker acknowledgement protocols. If your message consumer runs to completion, the message is acknowledged and removed from the queue. If you throw an exception, MassTransit uses a retry policy to redeliver the message to the consumer. If the retries are exhausted due to continued failures or other reasons, MassTransit moves the message to an error queue. If the message did not reach a consumer due to being misrouted to the queue, the message is moved to a skipped queue.")]),e._v(" "),a("h4",{attrs:{id:"serialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serialization"}},[e._v("#")]),e._v(" Serialization")]),e._v(" "),a("p",[e._v("C# is a statically typed language, and developers work with types. RabbitMQ works with bytes. So how do you format a message over the wire? How do you handle different date/time formats (local, UTC, unspecified)? How do you deal with numbers, are they integers, longs, or decimals? MassTransit has already thought about this and implemented sensible defaults for you. And there are many serializers provided out of the box, including JSON, BSON, and XML as well as the .NET binary formatter as a last resort.")]),e._v(" "),a("p",[e._v("You can even protect your messages using AES-256 encryption, to keep prying eyes away and to ensure the safety of private information (to meet PCI or HIPAA requirements).")]),e._v(" "),a("h4",{attrs:{id:"message-header-and-correlation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-header-and-correlation"}},[e._v("#")]),e._v(" Message header and correlation")]),e._v(" "),a("p",[e._v("Designing a common message envelope can be a nitty-gritty affair until things stabilize. And MassTransit is already stable having been used in production since 2008. The format is "),a("a",{attrs:{href:"/architecture/interoperability"}},[e._v("well documented")]),e._v(" and has been tested with billions of messages. Furthermore, the envelope includes headers for tracking messages, including conversations, correlations, and requests. The address and host information in the envelope make it easy to build any messaging pattern.")]),e._v(" "),a("h4",{attrs:{id:"consumer-lifecycle-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumer-lifecycle-management"}},[e._v("#")]),e._v(" Consumer lifecycle management")]),e._v(" "),a("p",[e._v("MassTransit handles consumer creation and disposal, and integrates with most major dependency injection containers using their built-in lifetime scope management. This ensures that dependencies are created and destroyed as part of the message consumption pipeline.")]),e._v(" "),a("h4",{attrs:{id:"routing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routing"}},[e._v("#")]),e._v(" Routing")]),e._v(" "),a("p",[e._v("MassTransit provides a heavily production tested convention for using RabbitMQ exchanges to route published messages to the subscribed consumers. The structure is CPU and memory friendly, which keeps RabbitMQ happy.")]),e._v(" "),a("h4",{attrs:{id:"easy-unit-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#easy-unit-testing"}},[e._v("#")]),e._v(" Easy Unit Testing")]),e._v(" "),a("p",[e._v("One of the first rules of unit testing is to avoid hitting infrastructure. And RabbitMQ is just that. MassTransit includes a high-performance in-memory transport for testing every consumer using the same code that would be used in production. And the MassTransit.TestFramework NuGet package includes test harnesses that handle the setup and teardown of the bus so you can easily test your message consumers and sagas.")]),e._v(" "),a("h4",{attrs:{id:"sagas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sagas"}},[e._v("#")]),e._v(" Sagas")]),e._v(" "),a("p",[e._v("Sagas are a powerful abstraction that supports message orchestration with durable state. Whether you use the original somewhat explicit syntax, or the powerful state machine syntax of "),a("strong",[e._v("Automatonymous")]),e._v(", you can build highly available distributed workflow and coordination services easily. MassTransit supports both Entity Framework and NHibernate, using code-based mapping and migrations to simply code deployments and upgrades.")]),e._v(" "),a("h4",{attrs:{id:"scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduling"}},[e._v("#")]),e._v(" Scheduling")]),e._v(" "),a("p",[e._v("MassTransit has strong integration with Quartz.NET, to make it easy to schedule messages for future delivery. This brings distributed applications into the fourth dimension, making time a first-class citizen. Some incredibly powerful routing systems have been built by the authors using Quartz in combination with other MassTransit features.")]),e._v(" "),a("p",[e._v("There are also other scheduling providers that are supported by MassTransit, such as RabbitMQ deferred messages and Azure Service Bus scheduled enqueueing.")]),e._v(" "),a("h4",{attrs:{id:"monitoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitoring"}},[e._v("#")]),e._v(" Monitoring")]),e._v(" "),a("p",[e._v("Keeping an eye on your services performance is critical, and having the right tools is a huge plus. MassTransit updates a range of performance counters as messages are processed so operations can keep an eye on message flow and compare the throughput to that of RabbitMQ.")])])}),[],!1,null,null,null);t.default=r.exports}}]);