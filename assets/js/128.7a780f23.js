(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{544:function(t,e,s){"use strict";s.r(e);var a=s(34),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"messages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messages"}},[t._v("#")]),t._v(" Messages")]),t._v(" "),s("p",[t._v("In MassTransit, a message contract is defined "),s("em",[t._v("code first")]),t._v(" by creating a .NET type. A message can be defined using a class or an interface, resulting in a strongly-typed contract. Messages should be limited to read-only properties and not include methods or behavior.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Important")]),t._v(" "),s("p",[t._v("MassTransit uses the full type name, including the "),s("em",[t._v("namespace")]),t._v(", for message contracts. When creating the same message "),s("em",[t._v("type")]),t._v(" in two separate projects, the namespaces "),s("strong",[t._v("must")]),t._v(" match or the message will not be consumed.")])]),t._v(" "),s("p",[t._v("An example message to update a customer address is shown below.")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("Company"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Application"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Contracts")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UpdateCustomerAddress")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Guid")]),t._v(" CommandId "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("DateTime")]),t._v(" Timestamp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" CustomerId "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" HouseNumber "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Street "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" City "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" State "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" PostalCode "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("It is strongly suggested to use interfaces for message contracts, based on experience over several years with varying levels of developer experience. MassTransit will create dynamic interface implementations for the messages, ensuring a clean separation of the message contract from the consumer.")])]),t._v(" "),s("p",[t._v("A common mistake when engineers are new to messaging is to create a base class for messages, and try to dispatch that base class in the consumer â€“ including the behavior of the subclass. Ouch. This always leads to pain and suffering, so just say no to base classes.")]),t._v(" "),s("h2",{attrs:{id:"message-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message-names"}},[t._v("#")]),t._v(" Message Names")]),t._v(" "),s("p",[t._v("There are two main message types, "),s("em",[t._v("events")]),t._v(" and "),s("em",[t._v("commands")]),t._v(". When choosing a name for a message, the type of message should dictate the tense of the message.")]),t._v(" "),s("h3",{attrs:{id:"commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[t._v("#")]),t._v(" Commands")]),t._v(" "),s("p",[t._v("A command tells a service to do something. Commands are "),s("RouterLink",{attrs:{to:"/usage/producers.html#send"}},[t._v("sent")]),t._v(" (using "),s("code",[t._v("Send")]),t._v(") to an endpoint, as it is expected that a single service instance performs the command action. A command should never be published.")],1),t._v(" "),s("p",[t._v("Commands should be expressed in a verb-noun sequence, following the "),s("em",[t._v("tell")]),t._v(" style.")]),t._v(" "),s("p",[t._v("Example Commands:")]),t._v(" "),s("ul",[s("li",[t._v("UpdateCustomerAddress")]),t._v(" "),s("li",[t._v("UpgradeCustomerAccount")]),t._v(" "),s("li",[t._v("SubmitOrder")])]),t._v(" "),s("h3",{attrs:{id:"events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),s("p",[t._v("An event signifies that something has happened. Events are "),s("RouterLink",{attrs:{to:"/usage/producers.html#publish"}},[t._v("published")]),t._v(" (using "),s("code",[t._v("Publish")]),t._v(") via either "),s("code",[t._v("IBus")]),t._v(" (standalone) or "),s("code",[t._v("ConsumeContext")]),t._v(" (within a message consumer). An event should not be sent directly to an endpoint.")],1),t._v(" "),s("p",[t._v("Events should be expressed in a noun-verb (past tense) sequence, indicating that something happened.")]),t._v(" "),s("p",[t._v("Example Events:")]),t._v(" "),s("ul",[s("li",[t._v("CustomerAddressUpdated")]),t._v(" "),s("li",[t._v("CustomerAccountUpgraded")]),t._v(" "),s("li",[t._v("OrderSubmitted, OrderAccepted, OrderRejected, OrderShipped")])]),t._v(" "),s("h2",{attrs:{id:"message-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message-headers"}},[t._v("#")]),t._v(" Message Headers")]),t._v(" "),s("p",[t._v("MassTransit encapsulates every sent or published message in a message envelope (described by the "),s("a",{attrs:{href:"https://www.enterpriseintegrationpatterns.com/patterns/messaging/EnvelopeWrapper.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Envelope Wrapper"),s("OutboundLink")],1),t._v(" pattern). The envelope adds a series of message headers, including:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Property")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("MessageId")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Generated for each message using "),s("code",[t._v("NewId.NextGuid")]),t._v(".")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CorrelationId")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("User")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Assigned by the application, or automatically by convention, and should uniquely identify the operation, event, etc.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("RequestId")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Request")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Assigned by the request client, and automatically copied by the "),s("em",[t._v("Respond")]),t._v(" methods to correlate responses to the original request.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("InitiatorId")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Assigned when publishing or sending from a consumer, saga, or activity to the value of the "),s("em",[t._v("CorrelationId")]),t._v(" on the consumed message.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ConversationId")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Assigned when the first message is sent or published and no consumed message is available, ensuring that a set of messages within the same conversation have the same identifier.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SourceAddress")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Where the message originated (may be a temporary address for messages published or sent from "),s("code",[t._v("IBus")]),t._v(").")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("DestinationAddress")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Where the message was sent")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ResponseAddress")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Request")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Where responses to the request should be sent. If not present, responses are "),s("em",[t._v("published")]),t._v(".")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("FaultAddress")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("User")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Where consumer faults should be sent. If not present, faults are "),s("em",[t._v("published")]),t._v(".")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ExpirationTime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("User")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("When the message should expire, which may be used by the transport to remove the message if it isn't consumed by the expiration time.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SentTime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("When the message was sent, in UTC.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("MessageType")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("An array of message types, in a "),s("code",[t._v("MessageUrn")]),t._v(" format, which can be deserialized.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Host")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Auto")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("The host information of the machine that sent or published the message.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Headers")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("User")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Additional headers, which can be added by the user, middleware, or diagnostic trace filters.")])])])]),t._v(" "),s("p",[t._v("Message headers can be read using the "),s("code",[t._v("ConsumeContext")]),t._v(" interface and specified using the "),s("code",[t._v("SendContext")]),t._v(" interface.")]),t._v(" "),s("h2",{attrs:{id:"correlation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#correlation"}},[t._v("#")]),t._v(" Correlation")]),t._v(" "),s("p",[t._v("Messages are usually part of a conversation and identifiers are used to connect messages to that conversation. In the previous section, the headers supported by MassTransit, including "),s("em",[t._v("ConversationId")]),t._v(", "),s("em",[t._v("CorrelationId")]),t._v(", and "),s("em",[t._v("InitiatorId")]),t._v(", are used to combine separate messages into a conversation. Outbound messages that are published or sent by a consumer will have the same "),s("em",[t._v("ConversationId")]),t._v(" as the consumed message. If the consumed message has a "),s("em",[t._v("CorrelationId")]),t._v(", that value will be copied to the "),s("em",[t._v("InitiatorId")]),t._v(". These headers capture the flow of messages involved in the conversation.")]),t._v(" "),s("p",[s("em",[t._v("CorrelationId")]),t._v(" may be set, when appropriate, by the developer publishing or sending a message. "),s("em",[t._v("CorrelationId")]),t._v(" can be set explicitly on the "),s("em",[t._v("PublishContext")]),t._v(" or "),s("em",[t._v("SendContext")]),t._v(" or when using a message initializer via the "),s("em",[t._v("__CorrelationId")]),t._v(" property. The example below shows how either of these methods can be used.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("div",{staticClass:"highlighted"},[t._v("Â ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageMessageCorrelation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Threading")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Threading"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Tasks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageContracts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("MassTransit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" busControl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Bus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateUsingRabbitMq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" busControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StartAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("CancellationTokenSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TimeSpan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FromSeconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" endpoint "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" busControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSendEndpoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"queue:order-service"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set CorrelationId using SendContext<T>")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" endpoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Send")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SubmitOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" OrderId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n                    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CorrelationId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set CorrelationId using initializer header")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" endpoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Send")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SubmitOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n                    OrderId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    __CorrelationId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id\n\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// InVar.Id returns the same value within the message initializer")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" busControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StopAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),s("h3",{attrs:{id:"correlation-conventions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#correlation-conventions"}},[t._v("#")]),t._v(" Correlation Conventions")]),t._v(" "),s("p",[s("em",[t._v("CorrelationId")]),t._v(" can also be set by convention. MassTransit includes several conventions by default, which may be used as the source to initialize the "),s("em",[t._v("CorrelationId")]),t._v(" header.")]),t._v(" "),s("ol",[s("li",[t._v("If the message implements the "),s("code",[t._v("CorrelatedBy<Guid>")]),t._v(" interface, which has a "),s("code",[t._v("Guid CorrelationId")]),t._v(" property, its value will be used.")]),t._v(" "),s("li",[t._v("If the message has a property named "),s("em",[t._v("CorrelationId")]),t._v(", "),s("em",[t._v("CommandId")]),t._v(", or "),s("em",[t._v("EventId")]),t._v(" that is a "),s("em",[t._v("Guid")]),t._v(" or "),s("em",[t._v("Guid?")]),t._v(", its value will be used.")]),t._v(" "),s("li",[t._v("If the developer registered a "),s("em",[t._v("CorrelationId")]),t._v(" provider for the message type, it will be used get the value.")])]),t._v(" "),s("p",[t._v("The final convention requires the developer to register a "),s("em",[t._v("CorrelationId")]),t._v(" provider prior to bus creation. The convention can be registered two ways, one of which is the new way, and the other which is the original approach that simply calls the new way. An example of the new approach, as well as the previous method, is shown below.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageMessageSetCorrelation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageContracts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("MassTransit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the OrderId as the message CorrelationId")]),t._v("\n            GlobalTopology"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseCorrelationId")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SubmitOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Previous approach, which now calls the new way above")]),t._v("\n            MessageCorrelation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseCorrelationId")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SubmitOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The convention can also be specified during bus configuration, as shown. In this case, the convention applies to the configured bus instance. The previous approach was a global configuration shared by all bus instances.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageMessageSendCorrelation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Threading")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Threading"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Tasks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UsageContracts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("MassTransit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" busControl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Bus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateUsingRabbitMq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cfg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                cfg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SendTopology"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseCorrelationId")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SubmitOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),s("p",[t._v("Registering "),s("em",[t._v("CorrelationId")]),t._v(" providers should be done early in the application, prior to bus configuration. An easy approach is putting the registration methods into a class method and calling it during application startup.")]),t._v(" "),s("h3",{attrs:{id:"saga-correlation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#saga-correlation"}},[t._v("#")]),t._v(" Saga Correlation")]),t._v(" "),s("p",[t._v("Sagas "),s("em",[t._v("must")]),t._v(" have a "),s("em",[t._v("CorrelationId")]),t._v(", it is the primary key used by the saga repository and the way messages are correlated to a specific saga instance. MassTransit follows the conventions above to obtain the "),s("em",[t._v("CorrelationId")]),t._v(" used to create a new or load an existing saga instance. Newly created saga instances will be assigned the "),s("em",[t._v("CorrelationId")]),t._v(" from the initiating message.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("New in Version 7")]),t._v(" "),s("p",[t._v("Previous versions of MassTransit only supported automatic correlation when the message implemented the "),s("code",[t._v("CorrelatedBy<Guid>")]),t._v(" interface. Starting with Version 7, all of the above conventions are used.")])]),t._v(" "),s("h3",{attrs:{id:"identifiers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#identifiers"}},[t._v("#")]),t._v(" Identifiers")]),t._v(" "),s("p",[t._v("MassTransit uses and highly encourages the use of "),s("em",[t._v("Guid")]),t._v(" identifiers. Distributed systems would crumble using monotonically incrementing identifiers (such as "),s("em",[t._v("int")]),t._v(" or "),s("em",[t._v("long")]),t._v(") due to the bottleneck of locking and incrementing a shared counter. Historically, certain types (okay, we'll call them out - SQL DBAs) have argued against using "),s("em",[t._v("Guid")]),t._v(" (or, their term, "),s("em",[t._v("uniqueidentifier")]),t._v(") as a key â€“ a clustered primary key in particular. However, with MassTransit, we solved that problem.")]),t._v(" "),s("p",[t._v("MassTransit uses "),s("a",{attrs:{href:"https://www.nuget.org/packages/NewId",target:"_blank",rel:"noopener noreferrer"}},[t._v("NewId"),s("OutboundLink")],1),t._v(" to generate identifiers that are unique, sequential, and represented as a "),s("em",[t._v("Guid")]),t._v(". The generated identifiers are clustered-index friendly, and are ordered so that SQL Server can efficiently insert them into a database with the "),s("em",[t._v("uniqueidentifier")]),t._v(" as the primary key.")]),t._v(" "),s("p",[t._v("To create a "),s("em",[t._v("Guid")]),t._v(", call "),s("code",[t._v("NewId.NextGuid()")]),t._v(" where you would otherwise call "),s("code",[t._v("Guid.NewGuid()")]),t._v(" â€“Â and start enjoying the benefits of fast, distributed identifiers.")]),t._v(" "),s("h2",{attrs:{id:"guidance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#guidance"}},[t._v("#")]),t._v(" Guidance")]),t._v(" "),s("p",[t._v("When defining message contracts, what follows is general guidance based upon years of using MassTransit combined with continued questions raised by developers new to MassTransit.")]),t._v(" "),s("ul",[s("li",[t._v("Use interfaces and message initializers. Once you adjust it starts to make more sense. Use the Roslyn Analyzer to identify missing or incompatible property initializers.\n"),s("ul",[s("li",[t._v("Inheritance is okay, but keep it sensible as the type hierarchy will be applied to the broker. A message type containing a dozen interfaces is a bit annoying to untangle if you need to delve deep into message routing to troubleshoot an issue.")])])]),t._v(" "),s("li",[t._v("Class inheritance has the same guidance as interfaces, but with more caution.\n"),s("ul",[s("li",[t._v("Consuming a base class type, and expecting polymorphic method behavior almost always leads to problems.")]),t._v(" "),s("li",[t._v("Message design is not object-oriented design. Messages should contain state, not behavior. Behavior should be in a separate class or service.")]),t._v(" "),s("li",[t._v("A big base class may cause pain down the road as changes are made, particularly when supporting multiple message versions.")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);